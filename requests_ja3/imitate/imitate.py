import importlib, importlib.util, importlib.machinery
import os
import shutil
import tempfile
import types

import setuptools.sandbox

from requests_ja3.decoder import Decoder

import pathlib

# noinspection PyUnresolvedReferences
def generate_imitation_libssl (ja3_str: str):
    # ja3 = Decoder.decode (ja3_str)
    # print (ja3)

    fakessl = _compile_fakessl_extension ()
    print (fakessl.increment (n = 5))

def _compile_fakessl_extension () -> types.ModuleType:
    with tempfile.TemporaryDirectory () as working_dir_str:
        working_dir = pathlib.Path (working_dir_str)
        imitate_py_dir = pathlib.Path (os.path.dirname (__file__))

        shutil.copytree (imitate_py_dir / "fakessl", working_dir / "fakessl")

        setuptools.sandbox.run_setup (working_dir / "fakessl" / "setup.py", ["--quiet", "build_ext", "--inplace"])

        # this is from _PyImport_DynLoadFiletab, which is defined in Python/dynload_*.c (platform-dependent)
        # and the Python list indexed below gets produced in _imp_extension_suffixes_impl from Python/import.c
        # it looks like on all platforms, the first entry matches the extension generated by setuptools
        # (probably, i dont have windows or mac machines on hand to test with)
        # also maybe worth noting that the list will be empty if python was compiled without dynamic loading support, according to _imp_extension_suffixes_impl
        fakessl_extension_suffix = importlib.machinery.EXTENSION_SUFFIXES [0]

        fakessl_file_name = f"fakessl{fakessl_extension_suffix}"
        fakessl_out_path = pathlib.Path (working_dir / "fakessl" / fakessl_file_name)
        spec = importlib.util.spec_from_file_location ("fakessl", fakessl_out_path)
        fakessl = importlib.util.module_from_spec (spec)

    return fakessl
